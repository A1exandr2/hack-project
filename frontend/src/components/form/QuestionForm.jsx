import { useState } from 'react';
import axios from 'axios';

export default function QuestionForm({ onPlanReceived }) {
  const [interests, setInterests] = useState('');
  const [time, setTime] = useState('');
  const [location, setLocation] = useState('');
  const [loading, setLoading] = useState(false);

  const interestCategories = [
  { id: 1, name: '–ø–∞–º—è—Ç–Ω–∏–∫', description: '–ü–∞–º—è—Ç–Ω–∏–∫–∏ –∏ –º–æ–Ω—É–º–µ–Ω—Ç—ã', icon: 'üèõÔ∏è' },
  { id: 10, name: '–º–æ–∑–∞–∏–∫–∞', description: '–ú–æ–∑–∞–∏–∫–∏ –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', icon: 'üé®' },
  { id: 2, name: '–ø–∞—Ä–∫–∏', description: '–ü–∞—Ä–∫–∏ –∏ –∑–æ–Ω—ã –ø—Ä–æ–≥—É–ª–∫–∏', icon: 'üå≥' },
  { id: 5, name: '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', description: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', icon: 'üèõÔ∏è' },
  { id: 7, name: '–º—É–∑–µ–∏', description: '–ú—É–∑–µ–∏ –∏ –≤—ã—Å—Ç–∞–≤–∫–∏', icon: 'üñºÔ∏è' },
  { id: 8, name: '—Ç–µ–∞—Ç—Ä—ã', description: '–¢–µ–∞—Ç—Ä—ã –∏ –∫–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–µ –∑–∞–ª—ã', icon: 'üé≠' },
  { id: 3, name: '–º–∞–∫–µ—Ç—ã', description: '–¢–∞–∫—Ç–∏–ª—å–Ω—ã–µ –º–∞–∫–µ—Ç—ã', icon: 'üî≤' },
  { id: 4, name: '–Ω–∞–±–µ—Ä–µ–∂–Ω—ã–µ', description: '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –∏ –≤–∏–¥—ã –Ω–∞ –≤–æ–¥—É', icon: 'üåä' },
  { id: 6, name: '–∫—É–ª—å—Ç—É—Ä–∞', description: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏, –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã, –ø–ª–∞–Ω–µ—Ç–∞—Ä–∏–∏', icon: 'üìö' },
  { id: 9, name: '–∏—Å—Ç–æ—Ä–∏—è', description: '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏', icon: 'üìú' }
];

  const handleCategoryClick = (categoryName) => {
    const interestsArray = interests.split(',').map(item => item.trim()).filter(item => item);
    
    if (interestsArray.includes(categoryName)) {
      const newInterests = interestsArray.filter(item => item !== categoryName).join(', ');
      setInterests(newInterests);
    } else {
      const newInterests = [...interestsArray, categoryName].join(', ');
      setInterests(newInterests);
    }
  };

  const isCategoryActive = (categoryName) => {
    return interests.split(',').map(item => item.trim()).includes(categoryName);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await axios.post('http://localhost:8000/api/plan', {
        interests,
        time_hours: parseFloat(time),
        location,
      });

      onPlanReceived(response.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±—ç–∫–µ–Ω–¥—É:', err);
      alert('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±—ç–∫–µ–Ω–¥.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="glass-card">
      <h2 className="text-center mb-lg">AI-–ü–æ–º–æ—â–Ω–∏–∫ —Ç—É—Ä–∏—Å—Ç–∞</h2>
      
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label><strong>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:</strong></label>
          
          <div className="categories-grid">
            {interestCategories.map(category => (
              <button
                key={category.id}
                type="button"
                onClick={() => handleCategoryClick(category.name)}
                className={`category-btn ${isCategoryActive(category.name) ? 'active' : ''}`}
                title={category.description}
              >
                <span className="category-emoji">{category.emoji}</span>
                <span className="category-name">{category.name}</span>
              </button>
            ))}
          </div>
          
          <div className="selected-interests">
            <label><strong>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:</strong></label>
            <textarea
              value={interests}
              onChange={(e) => setInterests(e.target.value)}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤—ã—à–µ –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏..."
              rows="2"
              required
            />
          </div>
        </div>

        <div className="form-group">
          <label><strong>–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —É –≤–∞—Å –µ—Å—Ç—å? (–≤ —á–∞—Å–∞—Ö)</strong></label>
          <input
            type="number"
            min="0.5"
            max="8"
            step="0.25"
            value={time}
            onChange={(e) => setTime(e.target.value)}
            placeholder="2.5"
            required
          />
          <div className="time-recommendation">
            –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º 2-4 —á–∞—Å–∞ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–∏
          </div>
        </div>

        <div className="form-group">
          <label><strong>–û—Ç–∫—É–¥–∞ –Ω–∞—á–Ω—ë–º –ø—Ä–æ–≥—É–ª–∫—É? (–∞–¥—Ä–µ—Å –∏–ª–∏ –º–µ—Å—Ç–æ)</strong></label>
          <input
            type="text"
            value={location}
            onChange={(e) => setLocation(e.target.value)}
            placeholder="–ø–ª. –ú–∏–Ω–∏–Ω–∞"
            required
          />
          <div className="location-examples">
            –ü—Ä–∏–º–µ—Ä—ã: –ø–ª. –ú–∏–Ω–∏–Ω–∞, —É–ª. –ë–æ–ª—å—à–∞—è –ü–æ–∫—Ä–æ–≤—Å–∫–∞—è, –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≤–æ–∫–∑–∞–ª
          </div>
        </div>

        <button 
          type="submit" 
          disabled={loading}
          className="submit-btn"
        >
          {loading ? (
            <>
              <span className="loading-spinner"></span>
              –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç...
            </>
          ) : (
            '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç'
          )}
        </button>
      </form>
    </div>
  );
}